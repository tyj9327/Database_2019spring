/* Generated By:JavaCC: Do not edit this line. SimpleDBMSParser.java */
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.Serializable;
import java.io.UnsupportedEncodingException;
import java.util.*;

import com.sleepycat.je.Database;
import com.sleepycat.je.DatabaseException;
import com.sleepycat.je.DatabaseConfig;
import com.sleepycat.je.DatabaseEntry;
import com.sleepycat.je.Cursor;
import com.sleepycat.je.OperationStatus;
import com.sleepycat.je.LockMode;
import com.sleepycat.je.DatabaseConfig;

import com.sleepycat.je.Environment;
import com.sleepycat.je.EnvironmentConfig;

import parsingTools.*;
import myDBMSTools.*;


public class SimpleDBMSParser implements Serializable, SimpleDBMSParserConstants {

        /**	 * 	 */
  private static final long serialVersionUID = 201212506L;
  public static final int PRINT_SYNTAX_ERROR = 0;
  public static final int PRINT_CREATE_TABLE = 1;
  public static final int PRINT_DROP_TABLE = 2;
  public static final int PRINT_DESC_TABLE = 3;
  public static final int PRINT_SHOW_TABLE = 4;
  public static final int PRINT_SELECT_TABLE = 5;
  public static final int PRINT_INSERT_TABLE = 6;
  public static final int PRINT_DELETE_TABLE = 7;


  public static void main(String args[]) throws ParseException
  {

    Environment tableDBenv = null;
    Database tableDB = null;
    Database tupleDB = null;

try{
                  // Open Database Environment or if not, create one.                  EnvironmentConfig tableEnvConfig = new EnvironmentConfig();
                  tableEnvConfig.setAllowCreate(true);
              tableDBenv = new Environment(new File("db/"), tableEnvConfig);


              //Open Database or if not, create one.              DatabaseConfig tableDBConfig = new DatabaseConfig();
              DatabaseConfig tupleDBConfig = new DatabaseConfig();
              tableDBConfig.setAllowCreate(true);
              tableDBConfig.setSortedDuplicates(true);
              tupleDBConfig.setAllowCreate(true);
              tupleDBConfig.setSortedDuplicates(true);
              tableDB = tableDBenv.openDatabase(null, "tableDB", tableDBConfig);
              tupleDB = tableDBenv.openDatabase(null, "tupleDB", tupleDBConfig);

          }
            catch (DatabaseException dbe){
                        System.err.println("Error accessing database." + dbe);
            }


    SimpleDBMSParser parser = new SimpleDBMSParser(System.in);
    System.out.print("DB_2012-12506> ");

        // 데이터베이스를 닫아주는 시점을 조절;        boolean exit = false;
    while (!exit)
    {
      try
      {
        exit = parser.command(tableDB, tupleDB);
      }
      catch (Exception e)
      {
//        e.printStackTrace();        printMessage(PRINT_SYNTAX_ERROR);
        SimpleDBMSParser.ReInit(System.in);
      }
    }

        if(tableDB != null) tableDB.close();
        if(tupleDB != null) tupleDB.close();
    if(tableDBenv != null) tableDBenv.close();
        System.exit(0);

  }

  // calls descTableDB method from DBmanage classpublic static void descTableDB(String tableName, Database tableDB) {

        try {
                DBmanage.descTableDB(tableName, tableDB);
        } catch (myTableException e) {
                // TODO Auto-generated catch block                e.printStackTrace();
        } catch (Exception e) {
                // TODO Auto-generated catch block                e.printStackTrace();
        }

}

  // calls createTableDB method from DBmanage classpublic static void createTableDB(String tableName, ArrayList<String > tElementList, Database tableDB, Database tupleDB) {
        try {
                DBmanage.createTableDB(tableName, tableDB, tupleDB, tElementList);
        } catch (myTableException e) {
                // TODO Auto-generated catch block                e.printStackTrace();
        } catch (Exception e) {
                // TODO Auto-generated catch block                e.printStackTrace();
        }
}

  // calls showTableDB method from DBmanage classpublic static void showTableDB(Database tableDB) {
        try {
                DBmanage.showDB(tableDB);
        } catch (myTableException e) {
                // TODO Auto-generated catch block                e.printStackTrace();
        }

}

  // calls dropTableDB method from DBmanage classpublic static void dropTableDB(String tableName, Database tableDB, Database tupleDB) {
        try {
                DBmanage.dropTableDB(tableName, tableDB, tupleDB);
        } catch (myTableException e) {
                // TODO Auto-generated catch block                e.printStackTrace();
        } catch (Exception e) {
                // TODO Auto-generated catch block                e.printStackTrace();
        }
}

//public static void insertToTable(Database tableDB, Database tupleDB, String tableName, ArrayList<ArrayList<String>> insertingRows) throws Exception, myTableException {public static void insertTableDB(String tableName, Database tableDB, Database tupleDB, ArrayList<ArrayList<String>> insertingRows) {
        try {
                DBmanage.insertToTable(tableDB, tupleDB, tableName, insertingRows);
        } catch (myTableException e) {
                // TODO Auto-generated catch block                e.printStackTrace();
        } catch (Exception e) {
                // TODO Auto-generated catch block                e.printStackTrace();
        }
}

//public static void selectTableDB(String tableName, Database tableDB, Database tupleDB, TableExpression tExp, ArrayList<String> selectList) {public static void selectTableDB(Database tableDB, Database tupleDB, TableExpression TE, ArrayList<String> selectList) {

          try {
                DBmanage.selectTableDB(tableDB, tupleDB, TE, selectList);
        }catch (myTableException mte) {
                mte.printStackTrace();
        }catch (Exception e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
        }
}

//public static void deleteRowDB(Database tableDB, Database tupleDB, String tableName, WhereClause WC) throws myTableException, Exception
public static void deleteRowTableDB(Database tableDB, Database tupleDB, String tableName, WhereClause WC) {
        try {
          DBmanage.deleteRowDB(tableDB, tupleDB, tableName, WC);
        } catch (myTableException mte) {
                mte.printStackTrace();
        }catch (Exception e) {
                // TODO Auto-generated catch block                e.printStackTrace();
        }
}

  public static void printMessage(int q)
  {
    switch(q)
    {
      case PRINT_SYNTAX_ERROR:
        System.out.println("Syntax error");
        break;
      case PRINT_CREATE_TABLE:
//      	System.out.println("\'CREATE TABLE\' requested");        break;
      case PRINT_DROP_TABLE:
//      	System.out.println("\'DROP TABLE\' requested");        break;
      case PRINT_DESC_TABLE:
//      	System.out.println("\'DESC\' requested");        break;
      case PRINT_SHOW_TABLE:
//      	System.out.println("\'SHOW_TABLE\' requested");        break;
      case PRINT_SELECT_TABLE:
//      	System.out.println("\'SELECT\' requested");        break;
      case PRINT_INSERT_TABLE:
//    	System.out.println("\'INSERT\' requested");        break;
      case PRINT_DELETE_TABLE:
//      	System.out.println("\'DELETE\' requested");        break;
    }
    System.out.print("DB_2012-12506> ");
  }

// exit을 하게 되면 DB를 닫을 수 있도록 boolean을 return  static final public boolean command(Database tDB, Database tupleDB) throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CREATE:
    case DROP:
    case DESC:
    case SELECT:
    case INSERT:
    case DELETE:
    case SHOW:
      queryList(tDB, tupleDB);
    {if (true) return false;}
      break;
    case EXIT:
      jj_consume_token(EXIT);
      jj_consume_token(SEMICOLON);
      {if (true) return true;}
      break;
    default:
      jj_la1[0] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public void queryList(Database tDB, Database tupleDB) throws ParseException {
  int q;
    label_1:
    while (true) {
      q = query(tDB, tupleDB);
      printMessage(q);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CREATE:
      case DROP:
      case DESC:
      case SELECT:
      case INSERT:
      case DELETE:
      case SHOW:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_1;
      }
    }
  }

  static final public int query(Database tDB, Database tupleDB) throws ParseException {
  int q;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CREATE:
      createTableQuery(tDB, tupleDB);
      q = PRINT_CREATE_TABLE;
      break;
    case DROP:
      dropTableQuery(tDB, tupleDB);
          q = PRINT_DROP_TABLE;
      break;
    case DESC:
      describeQuery(tDB);
          q = PRINT_DESC_TABLE;
      break;
    case SELECT:
      selectQuery(tDB, tupleDB);
          q = PRINT_SELECT_TABLE;
      break;
    case INSERT:
      insertQuery(tDB, tupleDB);
          q = PRINT_INSERT_TABLE;
      break;
    case DELETE:
      deleteQuery(tDB, tupleDB);
          q = PRINT_DELETE_TABLE;
      break;
    case SHOW:
      showTableQuery(tDB);
          q = PRINT_SHOW_TABLE;
      break;
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
      {if (true) return q;}
    throw new Error("Missing return statement in function");
  }

  static final public void createTableQuery(Database tDB, Database tupleDB) throws ParseException {
  String tName;
  ArrayList<String > tElementList;
    jj_consume_token(CREATE);
    jj_consume_token(TABLE);
    tName = tableName();
    tElementList = tableElementList();
    jj_consume_token(SEMICOLON);
    createTableDB(tName, tElementList, tDB, tupleDB);
  }

  static final public void dropTableQuery(Database tDB, Database tupleDB) throws ParseException {
  String tName;
    jj_consume_token(DROP);
    jj_consume_token(TABLE);
    tName = tableName();
    jj_consume_token(SEMICOLON);
    dropTableDB(tName, tDB, tupleDB);
  }

  static final public void describeQuery(Database tDB) throws ParseException {
  String tName;
    jj_consume_token(DESC);
    tName = tableName();
    jj_consume_token(SEMICOLON);
    descTableDB(tName, tDB);
  }

  static final public void showTableQuery(Database tDB) throws ParseException {
    jj_consume_token(SHOW);
    jj_consume_token(TABLES);
    jj_consume_token(SEMICOLON);
    showTableDB(tDB);
  }

  static final public void insertQuery(Database tDB, Database tupleDB) throws ParseException {
        String tName;
        ArrayList<ArrayList<String >> rows;
    jj_consume_token(INSERT);
    jj_consume_token(INTO);
    tName = tableName();
    rows = insertColumnsAndSource();
    jj_consume_token(SEMICOLON);
    insertTableDB(tName, tDB, tupleDB, rows);
  }

  static final public void deleteQuery(Database tableDB, Database tupleDB) throws ParseException {
  String fromTable;
  WhereClause WC = null;
  ArrayList<String> fromList = new ArrayList<String>();
    jj_consume_token(DELETE);
    jj_consume_token(FROM);
    fromTable = tableName();
    fromList.add(fromTable);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case WHERE:
      WC = whereClause(fromList, tableDB, tupleDB);
      break;
    default:
      jj_la1[3] = jj_gen;
      ;
    }
    jj_consume_token(SEMICOLON);
                deleteRowTableDB(tableDB, tupleDB, fromTable, WC);
  }

//CREATE_TABLE  
// tableElement를 arraylist로 반환;  static final public ArrayList<String > tableElementList() throws ParseException {
  ArrayList<String > tElementList = new ArrayList<String >();
  String tElement;
    jj_consume_token(LEFT_PAREN);
    tElement = tableElement();
    tElementList.add(tElement);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[4] = jj_gen;
        break label_2;
      }
      jj_consume_token(COMMA);
      tElement = tableElement();
    tElementList.add(tElement);
    }
    jj_consume_token(RIGHT_PAREN);
    {if (true) return tElementList;}
    throw new Error("Missing return statement in function");
  }

  static final public String tableElement() throws ParseException {
  String columnDef;
  String constDef;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LEGAL_IDENTIFIER:
      columnDef = columnDefinition();
    {if (true) return columnDef;}
      break;
    case PRIMARY:
    case FOREIGN:
      constDef = tableConstraintDefinition();
    {if (true) return constDef;}
      break;
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

// not null이 constraints로 있거나, 아예 없는 경우 포함.  static final public String columnDefinition() throws ParseException {
  String cName;
  String dType;
  String isNull = "Y";
  String columnDef;
    cName = columnName();
    dType = dataType();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NOT:
      jj_consume_token(NOT);
      jj_consume_token(NULL);
    isNull = "N";
      break;
    default:
      jj_la1[6] = jj_gen;
      ;
    }
    columnDef = "#ColumnDef" + "@" + cName + "@" + dType + "@" + isNull;
    {if (true) return columnDef;}
    throw new Error("Missing return statement in function");
  }

  static final public String tableConstraintDefinition() throws ParseException {
  String pKey;
  String refKey;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PRIMARY:
      pKey = primaryKeyConstraint();
    {if (true) return pKey;}
      break;
    case FOREIGN:
      refKey = referentialConstraint();
    {if (true) return refKey;}
      break;
    default:
      jj_la1[7] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public String primaryKeyConstraint() throws ParseException {
  String primaryColumnNameList;
    jj_consume_token(PRIMARY);
    jj_consume_token(KEY);
    primaryColumnNameList = columnNameList();
    {if (true) return "#Primary" + primaryColumnNameList;}
    throw new Error("Missing return statement in function");
  }

  static final public String referentialConstraint() throws ParseException {
  String foreignColumnList;
  String refTableName;
  String refColumnList;
    jj_consume_token(FOREIGN);
    jj_consume_token(KEY);
    foreignColumnList = columnNameList();
    jj_consume_token(REFERENCES);
    refTableName = tableName();
    refColumnList = columnNameList();
    //이부분 어떻게 split할지 고민. refColumnList 역시 space로 split해야 하기 때문에..
    {if (true) return "#Foreign" + foreignColumnList + "@#Reference@" + refTableName + refColumnList;}
    throw new Error("Missing return statement in function");
  }

// 여러 개의 columnName이 COMMA로 연결될 수 있음.// Split하는 방법 고민!  static final public String columnNameList() throws ParseException {
  String cNameList = "";
  String columnName;
    jj_consume_token(LEFT_PAREN);
    columnName = columnName();
    cNameList += "@" + columnName;
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[8] = jj_gen;
        break label_3;
      }
      jj_consume_token(COMMA);
      columnName = columnName();
    cNameList += "@" + columnName;
    }
    jj_consume_token(RIGHT_PAREN);
    {if (true) return cNameList;}
    throw new Error("Missing return statement in function");
  }

  static final public String dataType() throws ParseException {
  Token intVal;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INT:
      jj_consume_token(INT);
    {if (true) return "int";}
      break;
    case CHAR:
      jj_consume_token(CHAR);
      jj_consume_token(LEFT_PAREN);
      intVal = jj_consume_token(INT_VALUE);
      jj_consume_token(RIGHT_PAREN);
    {if (true) return "char(" + intVal.image + ")";}
      break;
    case DATE:
      jj_consume_token(DATE);
    {if (true) return "date";}
      break;
    default:
      jj_la1[9] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public String tableName() throws ParseException {
  Token legIdentifier;
    legIdentifier = jj_consume_token(LEGAL_IDENTIFIER);
    {if (true) return legIdentifier.image.toLowerCase();}
    throw new Error("Missing return statement in function");
  }

  static final public String columnName() throws ParseException {
  Token legIdentifier;
    legIdentifier = jj_consume_token(LEGAL_IDENTIFIER);
    {if (true) return legIdentifier.image.toLowerCase();}
    throw new Error("Missing return statement in function");
  }

//SELECT_TABLE  static final public void selectQuery(Database tableDB, Database tupleDB) throws ParseException {
  TableExpression TE;
  ArrayList<String> selList;
  ArrayList<ArrayList<String>> finalChosenRows;
    jj_consume_token(SELECT);
    selList = selectList();
    TE = tableExpression(tableDB, tupleDB);
    jj_consume_token(SEMICOLON);
    // 여기에 dbSelect 추가!
    selectTableDB(tableDB, tupleDB, TE, selList);
  }

  static final public ArrayList<String> selectList() throws ParseException {
  ArrayList<String> selColumnList = new ArrayList<String>();
  String selColumn = "";
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASTERISK:
      jj_consume_token(ASTERISK);
            selColumnList.add("*");
      break;
    case LEGAL_IDENTIFIER:
      selColumn = selectedColumn();
            selColumnList.add(selColumn);
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[10] = jj_gen;
          break label_4;
        }
        jj_consume_token(COMMA);
        selColumn = selectedColumn();
              selColumnList.add(selColumn);
      }
      break;
    default:
      jj_la1[11] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return selColumnList;}
    throw new Error("Missing return statement in function");
  }

/* tableName()과 columnName() 두 함수 모두 LEGAL_IDENTIFIER를 token으로 사용하기 때문에   이 둘을 구분지어줄 필요가 있음. 이를 위해  LOOKAHEAD를 사용하여 2개의 token을 무조건 확인하도록 하면   < PERIOD >가 발견되면 tablename. 이 포함된 것으로 인식하도록 할 수 있음.*/
  static final public String selectedColumn() throws ParseException {
  String tName;
  String cName;
  String selColumn = "";
    if (jj_2_1(2)) {
      tName = tableName();
      jj_consume_token(PERIOD);
                  selColumn += tName + ".";
    } else {
      ;
    }
    cName = columnName();
          selColumn += cName;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case AS:
      jj_consume_token(AS);
      cName = columnName();
          selColumn += "@" + cName;
      break;
    default:
      jj_la1[12] = jj_gen;
      ;
    }
    {if (true) return selColumn;}
    throw new Error("Missing return statement in function");
  }

  static final public TableExpression tableExpression(Database tableDB, Database tupleDB) throws ParseException {
  TableExpression TE;
  WhereClause WC = null;
  ArrayList<String> fromList;
    fromList = fromClause();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case WHERE:
      WC = whereClause(fromList, tableDB, tupleDB);
      break;
    default:
      jj_la1[13] = jj_gen;
      ;
    }
    TE = new TableExpression(WC, fromList);
    {if (true) return TE;}
    throw new Error("Missing return statement in function");
  }

// 이부분을 BooleanDefiner로 보내주어야 함! predicate 부분에서 사용   static final public ArrayList<String> fromClause() throws ParseException {
  ArrayList<String> tNameList;
    jj_consume_token(FROM);
    tNameList = tableReferenceList();
    {if (true) return tNameList;}
    throw new Error("Missing return statement in function");
  }

  static final public ArrayList<String> tableReferenceList() throws ParseException {
  ArrayList<String> tNameList = new ArrayList<String>();
  String tName;
    tName = referedTable();
    tNameList.add(tName);
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[14] = jj_gen;
        break label_5;
      }
      jj_consume_token(COMMA);
      tName = referedTable();
      tNameList.add(tName);
    }
    {if (true) return tNameList;}
    throw new Error("Missing return statement in function");
  }

  static final public String referedTable() throws ParseException {
  String tName = "";
  String rename = "";
    tName = tableName();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case AS:
      jj_consume_token(AS);
      rename = tableName();
      rename = "#" + rename;
      break;
    default:
      jj_la1[15] = jj_gen;
      ;
    }
    {if (true) return tName + rename;} // tName#rename

    throw new Error("Missing return statement in function");
  }

// 체크할 부분   static final public WhereClause whereClause(ArrayList<String> fromTableList, Database tableDB, Database tupleDB) throws ParseException {
  ArrayList<ArrayList<String>> finalMatchingRows;
  WhereClause WC;

  ArrayList<ArrayList<String>> joinedRows = DBmanage.makingJoinedRows(tableDB, tupleDB, fromTableList); // 전부 join한 tuple들   ArrayList<String> columnNameList = DBmanage.getColumnNameList(tableDB, fromTableList); // 모든 조인된 튜플의 column 이름 list ( table 여러개면 tName.cName으로 저장)  ArrayList<String> dataTypeList = DBmanage.getDataTypeList(tableDB, fromTableList); // 모든 조인된 칼럼의 dataType list  String[] matchingRowsIndex;
    jj_consume_token(WHERE);
    matchingRowsIndex = booleanValueExpression(joinedRows, columnNameList, dataTypeList);
    finalMatchingRows = BooleanDefiner.getFinalRows(matchingRowsIndex, joinedRows);
        WC = new WhereClause(finalMatchingRows, columnNameList);
    {if (true) return WC;}
    throw new Error("Missing return statement in function");
  }

  static final public String[] booleanValueExpression(ArrayList<ArrayList<String>> joinedRows, ArrayList<String> columnNameList, ArrayList<String> dataTypeList) throws ParseException {
  String[] matchingRowsIndex;
  ArrayList<String[]> boolTermList = new ArrayList<String[]>();
  String[] boolTerm;
    boolTerm = booleanTerm(joinedRows, columnNameList, dataTypeList);
    boolTermList.add(boolTerm);
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OR:
        ;
        break;
      default:
        jj_la1[16] = jj_gen;
        break label_6;
      }
      jj_consume_token(OR);
      boolTerm = booleanTerm(joinedRows, columnNameList, dataTypeList);
      boolTermList.add(boolTerm);
    }
    matchingRowsIndex = BooleanDefiner.afterOrMatchingRows(boolTermList);
    {if (true) return matchingRowsIndex;}
    throw new Error("Missing return statement in function");
  }

  static final public String[] booleanTerm(ArrayList<ArrayList<String>> joinedRows, ArrayList<String> columnNameList, ArrayList<String> dataTypeList) throws ParseException {
  ArrayList<String[]> boolFactorList = new ArrayList<String[]>();
  String[] boolFactor;
  String[] matchingRowsIndex;
    boolFactor = booleanFactor(joinedRows, columnNameList, dataTypeList);
    boolFactorList.add(boolFactor);
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
        ;
        break;
      default:
        jj_la1[17] = jj_gen;
        break label_7;
      }
      jj_consume_token(AND);
      boolFactor = booleanFactor(joinedRows, columnNameList, dataTypeList);
      boolFactorList.add(boolFactor);
    }
    matchingRowsIndex = BooleanDefiner.afterAndMatchingRows(boolFactorList);
    {if (true) return matchingRowsIndex;}
    throw new Error("Missing return statement in function");
  }

  static final public String[] booleanFactor(ArrayList<ArrayList<String>> joinedRows, ArrayList<String> columnNameList, ArrayList<String> dataTypeList) throws ParseException {
  String[] matchingRowsIndex;
  String[] bTestIndex;
  String not = "";
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NOT:
      jj_consume_token(NOT);
      not += "not";
      break;
    default:
      jj_la1[18] = jj_gen;
      ;
    }
    bTestIndex = booleanTest(joinedRows, columnNameList, dataTypeList);
    matchingRowsIndex = BooleanDefiner.afterNotMatchingRows(bTestIndex, not);
    {if (true) return matchingRowsIndex;}
    throw new Error("Missing return statement in function");
  }

  static final public String[] booleanTest(ArrayList<ArrayList<String>> joinedRows, ArrayList<String> columnNameList, ArrayList<String> dataTypeList) throws ParseException {
  String[] matchingRowsIndex;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INT_VALUE:
    case LEGAL_IDENTIFIER:
    case CHAR_STRING:
    case DATE_VALUE:
      matchingRowsIndex = predicate(joinedRows, columnNameList, dataTypeList);
      break;
    case LEFT_PAREN:
      matchingRowsIndex = parenthesizedBooleanExpression(joinedRows, columnNameList, dataTypeList);
      break;
    default:
      jj_la1[19] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return matchingRowsIndex;}
    throw new Error("Missing return statement in function");
  }

  static final public String[] parenthesizedBooleanExpression(ArrayList<ArrayList<String>> joinedRows, ArrayList<String> joinedColumnNames, ArrayList<String> dataTypeList) throws ParseException {
  String[] matchingRowsIndex;
    jj_consume_token(LEFT_PAREN);
    matchingRowsIndex = booleanValueExpression(joinedRows, joinedColumnNames, dataTypeList);
    jj_consume_token(RIGHT_PAREN);
    {if (true) return matchingRowsIndex;}
    throw new Error("Missing return statement in function");
  }

/* nullPredicate()함수와 comparisonPredicate()함수 둘 모두 내부적으로   ( LOOKAHEAD(2) tableName() < PERIOD > )? columnName() 라는 중복된 부분을 확인하게 됨.   이 때문에 둘을 구분지어줄 수 있는 LOOKAHEAD가 필요하며, nullPredicate()함수 전체의 token 길이만큼   체크하여 nullPredicate()에 해당하는지 확인 - nullOperation()함수 부분의 유무 check - 한 후,   해당사항에 없으면 comparisonPredicate()으로 인식할 수 있도록 LOOKAHEAD(nullPredicate())를 사용했음.*/
  static final public String[] predicate(ArrayList<ArrayList<String>> joinedRows, ArrayList<String> joinedColumnNames, ArrayList<String> dataTypeList) throws ParseException {
  String predicateLine;
  String[] matchingRowsIndex;
    if (jj_2_2(2147483647)) {
      predicateLine = nullPredicate();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INT_VALUE:
      case LEGAL_IDENTIFIER:
      case CHAR_STRING:
      case DATE_VALUE:
        predicateLine = comparisonPredicate();
        break;
      default:
        jj_la1[20] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
        // predicateDefiner(ArrayList<String> dataTypeList, ArrayList<String> joinedColumnNames, ArrayList<ArrayList<String>> joinedRows, String predicateLine, Database tableDB)
   matchingRowsIndex = BooleanDefiner.predicateDefiner(dataTypeList, joinedColumnNames, joinedRows, predicateLine);
   {if (true) return matchingRowsIndex;}
    throw new Error("Missing return statement in function");
  }

// compOperand&<=&compOperand 형태로 나옴!  static final public String comparisonPredicate() throws ParseException {
  Token operator;
  String op1;
  String op2;
  String full;
    op1 = compOperand();
    operator = jj_consume_token(COMP_OP);
    op2 = compOperand();
    full = op1 + "&" + operator.image + "&" + op2;
    {if (true) return full;}
    throw new Error("Missing return statement in function");
  }

/* tableName()과 columnName() 모두 LEGAL_IDENTIFIER를 token으로 가지기 때문에 LOOKAHEAD를 사용하여   PERIOD token의 존재를 확인하여 둘을 구분지음.   comparableValue의 경우 맨 앞에 I, C, D 중 하나로 나오고, 테이블이 포함된 칼럼이 나오게 되면 맨 앞에 T가, 그냥 칼럼이 나오면 @가 나옴.   1) I.../C.../D... 2)TtName.@cName 3)@cName */
  static final public String compOperand() throws ParseException {
  String compOp = "";
  String tName;
  String cName;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INT_VALUE:
    case CHAR_STRING:
    case DATE_VALUE:
      compOp = comparableValue();
      break;
    case LEGAL_IDENTIFIER:
      if (jj_2_3(2)) {
        tName = tableName();
        jj_consume_token(PERIOD);
              compOp = tName + ".";
      } else {
        ;
      }
      cName = columnName();
              compOp += "@" + cName;
      break;
    default:
      jj_la1[21] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return compOp;}
    throw new Error("Missing return statement in function");
  }

  static final public String comparableValue() throws ParseException {
  Token value;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INT_VALUE:
      value = jj_consume_token(INT_VALUE);
    {if (true) return "I" + value.image;}
      break;
    case CHAR_STRING:
      value = jj_consume_token(CHAR_STRING);
    {if (true) return "C" + value.image.substring(1, value.image.length() - 1).toLowerCase();}
      break;
    case DATE_VALUE:
      value = jj_consume_token(DATE_VALUE);
    {if (true) return "D" + value.image;}
      break;
    default:
      jj_la1[22] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

/* tableName()과 columnName() 모두 LEGAL_IDENTIFIER를 token으로 가지기 때문에 LOOKAHEAD를 사용하여   PERIOD token의 존재를 확인하여 둘을 구분지음. */
  static final public String nullPredicate() throws ParseException {
  String nullString = "";
  String tName;
  String cName;
  String nullOp;
    if (jj_2_4(2)) {
      tName = tableName();
      jj_consume_token(PERIOD);
          nullString += tName + "#";
    } else {
      ;
    }
    cName = columnName();
    nullString += cName + "@";
    nullOp = nullOperation();
    nullString += nullOp;
    nullString = "$" + nullString;
    {if (true) return nullString;}
    throw new Error("Missing return statement in function");
  }

/* create table 쿼리에서 NOT_NULL token을 이미 만들어두었기 때문에 NULL token을 따로 추가하여 둘 중 하나로 인식.*/
  static final public String nullOperation() throws ParseException {
  String nullOp = "";
    jj_consume_token(IS);
    nullOp += "is";
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NOT:
      jj_consume_token(NOT);
      nullOp += "not";
      break;
    default:
      jj_la1[23] = jj_gen;
      ;
    }
    jj_consume_token(NULL);
    nullOp += "null";
    {if (true) return nullOp;}
    throw new Error("Missing return statement in function");
  }

//InsertPart
  static final public ArrayList<ArrayList<String >> insertColumnsAndSource() throws ParseException {
  ArrayList<String> vList;
  String cNameList = "";
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LEFT_PAREN:
      cNameList = columnNameList();
      break;
    default:
      jj_la1[24] = jj_gen;
      ;
    }
    vList = valueList();
    ArrayList<ArrayList<String >> rows = new ArrayList<ArrayList<String >>();

    if(cNameList.equals("")) {
      rows.add(vList);
      {if (true) return rows;}
    }else {
      ArrayList<String> columnNames = new ArrayList<String >();
      String[] columnNamesArr = cNameList.substring(1).split("@");
      for(String cName : columnNamesArr) {
        columnNames.add(cName);
      }
      rows.add(vList);
      rows.add(columnNames);
      {if (true) return rows;}
    }
    throw new Error("Missing return statement in function");
  }

  static final public ArrayList<String> valueList() throws ParseException {
  ArrayList<String> vList = new ArrayList<String>();
  String values;
    jj_consume_token(VALUES);
    jj_consume_token(LEFT_PAREN);
    values = value();
    vList.add(values);
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[25] = jj_gen;
        break label_8;
      }
      jj_consume_token(COMMA);
      values = value();
          vList.add(values);
    }
    jj_consume_token(RIGHT_PAREN);
    {if (true) return vList;}
    throw new Error("Missing return statement in function");
  }

  static final public String value() throws ParseException {
  String values;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NULL:
      jj_consume_token(NULL);
    {if (true) return "null";}
      break;
    case INT_VALUE:
    case CHAR_STRING:
    case DATE_VALUE:
      values = comparableValue();
    {if (true) return values;}
      break;
    default:
      jj_la1[26] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  static private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  static private boolean jj_3_4() {
    if (jj_3R_9()) return true;
    if (jj_scan_token(PERIOD)) return true;
    return false;
  }

  static private boolean jj_3R_12() {
    if (jj_scan_token(IS)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_13()) jj_scanpos = xsp;
    if (jj_scan_token(NULL)) return true;
    return false;
  }

  static private boolean jj_3R_10() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_4()) jj_scanpos = xsp;
    if (jj_3R_11()) return true;
    if (jj_3R_12()) return true;
    return false;
  }

  static private boolean jj_3R_11() {
    if (jj_scan_token(LEGAL_IDENTIFIER)) return true;
    return false;
  }

  static private boolean jj_3_1() {
    if (jj_3R_9()) return true;
    if (jj_scan_token(PERIOD)) return true;
    return false;
  }

  static private boolean jj_3R_13() {
    if (jj_scan_token(NOT)) return true;
    return false;
  }

  static private boolean jj_3R_9() {
    if (jj_scan_token(LEGAL_IDENTIFIER)) return true;
    return false;
  }

  static private boolean jj_3_3() {
    if (jj_3R_9()) return true;
    if (jj_scan_token(PERIOD)) return true;
    return false;
  }

  static private boolean jj_3_2() {
    if (jj_3R_10()) return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public SimpleDBMSParserTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[27];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x3f220,0x3f200,0x3f200,0x2000000,0x0,0xc0000,0x8000000,0xc0000,0x0,0x1c0,0x0,0x400000,0x800000,0x2000000,0x0,0x800000,0x4000000,0x10000000,0x8000000,0x0,0x0,0x0,0x0,0x8000000,0x0,0x0,0x40000000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x10,0x200,0x0,0x0,0x10,0x0,0x10,0x200,0x0,0x0,0x10,0x0,0x0,0x0,0x0,0xc244,0xc240,0xc240,0xc040,0x0,0x4,0x10,0xc040,};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[4];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public SimpleDBMSParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public SimpleDBMSParser(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new SimpleDBMSParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 27; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 27; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public SimpleDBMSParser(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new SimpleDBMSParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 27; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 27; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public SimpleDBMSParser(SimpleDBMSParserTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 27; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(SimpleDBMSParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 27; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[54];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 27; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 54; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 4; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
